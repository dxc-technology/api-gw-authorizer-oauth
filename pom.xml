<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <version>1.0.0</version>
  <name>api-gw-authorizer</name>
  <packaging>pom</packaging>
  <groupId>jaf.aws</groupId>
  <description>AWS API Gateway Authorizer Lambda for OAuth JWT access/identity tokens</description>
  <artifactId>api-gw-authorizer</artifactId>
  <properties>
   <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
   <maven.test.skip>true</maven.test.skip>
   <maven.install-requirements.skip>false</maven.install-requirements.skip>
   <maven.assembly.skip>false</maven.assembly.skip>
   <python.location>${user.home}\AppData\Local\Programs\Python\Python311\python.exe</python.location>
  </properties>
<!--  To use with S3 repositories 
   <artifactrepo.url>s3://automation-dxciber-ops</artifactrepo.url>
  <repositories>
    <repository>
        <id>aws-snapshot</id>
        <name>Snapshot Repository</name>
        <url>${artifactrepo.url}/lambda/snapshot</url>
    </repository>
    <repository>
        <id>aws-release</id>
        <name>Release Repository</name>
        <url>${artifactrepo.url}/lambda/release</url>
    </repository>
  </repositories>
-->
  <build>
  <!-- Required for using S3 Maven Repositories 
    <extensions>
      <extension>
        <groupId>com.github.platform-team</groupId>
        <artifactId>aws-maven</artifactId>
        <version>6.0.0</version>
      </extension>
    </extensions> -->
    <plugins>
    <plugin>
      <artifactId>maven-clean-plugin</artifactId>
      <version>3.3.1</version>
      <configuration>
        <filesets>
          <fileset>
            <directory>lib</directory>
            <includes>
              <include>**/*</include>
            </includes>
            <followSymlinks>false</followSymlinks>
          </fileset>
          <fileset>
            <directory>lib-extensions</directory>
            <includes>
              <include>**/*</include>
            </includes>
            <followSymlinks>false</followSymlinks>
          </fileset>
          <fileset>
            <directory>lib-policy-factory-layer</directory>
            <includes>
              <include>**/*</include>
            </includes>
            <followSymlinks>false</followSymlinks>
          </fileset>
          <fileset>
            <directory>testlib</directory>
            <includes>
              <include>**/*</include>
            </includes>
            <followSymlinks>false</followSymlinks>
          </fileset>
        </filesets>
      </configuration>
    </plugin>
    <plugin>
      <groupId>org.codehaus.gmaven</groupId>
      <artifactId>groovy-maven-plugin</artifactId>
      <version>2.1.1</version>
        <executions>
          <execution>
            <id>set-main-artifact</id>
            <phase>package</phase>
            <goals>
              <goal>execute</goal>
            </goals>
            <configuration>
              <source>project.artifact.setFile(new File("./${project.artifactId}-${project.version}-lambda.zip"))</source>
            </configuration>
          </execution>
      </executions>
    </plugin>
    <plugin>
        <artifactId>maven-install-plugin</artifactId>
        <version>3.1.1</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.4.0</version>
        <executions>
          <execution>
            <id>attach-artifacts</id>
            <phase>package</phase>
            <goals>
              <goal>attach-artifact</goal>
            </goals>
            <configuration>
              <artifacts>
                <artifact>
                  <file>${project.build.directory}/${project.artifactId}-${project.version}-lambda.zip</file>
                  <type>zip</type>
                  <classifier>lambda</classifier>
                </artifact>
                <artifact>
                  <file>${project.build.directory}/${project.artifactId}-${project.version}-extension.zip</file>
                  <type>zip</type>
                  <classifier>extension</classifier>
                </artifact>
                <artifact>
                  <file>${project.build.directory}/${project.artifactId}-${project.version}-cfn.zip</file>
                  <type>zip</type>
                  <classifier>cfn</classifier>
                </artifact>
                <artifact>
                  <file>${project.build.directory}/${project.artifactId}-${project.version}-policy-factory-layer.zip</file>
                  <type>zip</type>
                  <classifier>custom-layer</classifier>
                </artifact>
              </artifacts>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>install-requirements</id>
            <phase>compile</phase>
            <goals>
              <goal>exec</goal>
            </goals>
        	<configuration>
        	    <skip>${maven.install-requirements.skip}</skip>
          		<executable>docker</executable>
          		<!-- optional -->
          		<workingDirectory>${basedir}</workingDirectory>
          		<arguments>
        	    	<argument>run</argument>
    	        	<argument>-v</argument>
	            	<argument>${basedir}:/var/task</argument>
<!-- WARNING: Lambda container here must match Lambda runtime environment when deployed -->
<!--          otherwise fails with "No module named _cffi_backend"  -->	            	
            		<argument>&quot;lambci/lambda:build-python3.8&quot;</argument>
        	    	<argument>/bin/sh</argument>
    	        	<argument>-c</argument>
	            	<argument>&quot;pip install -r requirements -t lib &amp;&amp;pip install -r src/cache_extension/requirements -t lib-extension&amp;&amp;pip install -r src/policy_factory_layer/requirements -t lib-policy-factory-layer &amp;&amp; exit&quot;</argument>
          		</arguments>
          		<environmentVariables>
    	  		</environmentVariables>
	      	</configuration>
          </execution>
		  <execution>
		    <id>test-requirements</id>
		    <phase>compile</phase>
		    <goals>
		      <goal>exec</goal>
		    </goals>
		    <configuration>
              <executable>${python.location}</executable>
              <workingdirectory>${basedir}</workingdirectory>
	          <environmentVariables>
  	          </environmentVariables>
		      <skip>${maven.test.skip}</skip>
		      <arguments>
		        <argument>-m</argument> <argument>pip</argument> <argument>install</argument> <argument>-r</argument> <argument>test/requirements</argument> <argument>-t</argument> <argument>testlib</argument>
		      </arguments>
		    </configuration>
     	  </execution>
		  <execution>
		    <id>local test</id>
		    <phase>test</phase>
		    <goals>
		      <goal>exec</goal>
		    </goals>
		    <configuration>
              <executable>${python.location}</executable>
              <workingdirectory>${basedir}/test</workingdirectory>
	          <environmentVariables>
	            <PYTHONPATH>
	                ${basedir}\testlib;${basedir}\src
	            </PYTHONPATH>
  	          </environmentVariables>
		      <skip>${maven.test.skip}</skip>
		      <arguments>
		        <argument>test/adtokentest.py</argument>
		      </arguments>
		    </configuration>
     	  </execution>
        </executions>
      </plugin>
	  <plugin>
		   <groupId>org.apache.maven.plugins</groupId>
		   <artifactId>maven-compiler-plugin</artifactId>
		   <version>3.11.0</version>
		   <executions>
		     <execution>
		       <id>default-compile</id>
		       <phase>compile</phase>
		       <goals>
		          <goal>compile</goal>
		       </goals>
		       <configuration>
		         <skipMain>true</skipMain>
		       </configuration>
		     </execution>
		   </executions>
	  </plugin>    
      <plugin>
	    <groupId>org.apache.maven.plugins</groupId>
	    <artifactId>maven-surefire-plugin</artifactId>
	    <version>3.1.2</version>
	    <configuration>
	      <skipTests>true</skipTests>
	    </configuration>
	  </plugin>
      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.3.0</version>
        <executions>
          <execution>
            <id>default-jar</id>
            <phase>never</phase>
            <configuration>
              <finalName>unwanted</finalName>
              <classifier>unwanted</classifier>
            </configuration>
          </execution>
        </executions>
      </plugin>
<!-- Apply replacements on CloudFormation templates -->
      <plugin> 
         <groupId>com.google.code.maven-replacer-plugin</groupId>
         <artifactId>replacer</artifactId> 
         <version>1.5.3</version> 
         <executions>
           <execution>
             <phase>process-resources</phase>
             <goals>
               <goal>replace</goal>
            </goals>
           </execution>
         </executions>
         <configuration>
          <basedir>${project.basedir}</basedir>
          <outputDir>target/cfn</outputDir>
          <preserveDir>false</preserveDir>
          <includes>
            <include>
               src/cfn/**.yaml
            </include>
            <include>
               src/cfn/**.template
            </include>
          </includes>
          <replacements>
           <replacement>
             <token>@VERSION@</token>
             <value>${project.version}</value>
           </replacement>
           <replacement>
             <token>@S3_BUCKET@</token>
             <value>${artifactrepo.url}</value>
           </replacement>
           <replacement>
             <token>@S3_OBJECT_LAMBDA@</token>
             <value>${project.artifactId}-${project.version}-lambda.zip</value>
           </replacement>
           <replacement>
             <token>@S3_OBJECT_EXTENSION@</token>
             <value>${project.artifactId}-${project.version}-extension.zip</value>
           </replacement>
           <replacement>
             <token>@S3_OBJECT_POLICY_FACTORY_LAYER@</token>
             <value>${project.artifactId}-${project.version}-policy-factory-layer.zip</value>
           </replacement>
          </replacements>
         </configuration>
      </plugin>
<!-- Create ZIP packages for deployment -->
      <plugin>
		  <groupId>org.apache.maven.plugins</groupId>
		  <artifactId>maven-assembly-plugin</artifactId>
		  <version>3.6.0</version>
		  <configuration>
		    <descriptorSourceDirectory>${basedir}/src/assemblies</descriptorSourceDirectory>
            <attach>false</attach>
            <skipAssembly>${maven.assembly.skip}</skipAssembly>
		  </configuration>
		  <executions>
		    <execution>
		      <id>zip</id>
		      <phase>package</phase>
		      <goals>
		        <goal>single</goal>
		      </goals>
		    </execution>
		  </executions>
	  </plugin>
      <plugin>
         <artifactId>maven-deploy-plugin</artifactId>
         <version>3.1.1</version>
         <executions>
            <execution>
               <id>deploy-main</id>
               <goals>
                  <goal>deploy-file</goal>
               </goals>
               <phase>deploy</phase>
               <configuration>
                  <file>${project.build.directory}/${project.artifactId}-${project.version}-lambda.zip</file>
                  <url>${project.distributionManagementArtifactRepository.url}</url>
                  <repositoryId>${project.distributionManagementArtifactRepository.id}</repositoryId>
                  <artifactId>${project.artifactId}-lambda</artifactId>
                  <groupId>${project.groupId}</groupId>
                  <version>${project.version}</version>
               </configuration>
            </execution>
            <execution>
               <id>deploy-extension</id>
               <goals>
                  <goal>deploy-file</goal>
               </goals>
               <phase>deploy</phase>
               <configuration>
                  <file>${project.build.directory}/${project.artifactId}-${project.version}-extension.zip</file>
                  <url>${project.distributionManagementArtifactRepository.url}</url>
                  <repositoryId>${project.distributionManagementArtifactRepository.id}</repositoryId>
                  <artifactId>${project.artifactId}-extension</artifactId>
                  <groupId>${project.groupId}</groupId>
                  <version>${project.version}</version>
               </configuration>
            </execution>
            <execution>
               <id>deploy-cfn</id>
               <goals>
                  <goal>deploy-file</goal>
               </goals>
               <phase>deploy</phase>
               <configuration>
                  <file>${project.build.directory}/${project.artifactId}-${project.version}-cfn.zip</file>
                  <url>${project.distributionManagementArtifactRepository.url}</url>
                  <repositoryId>${project.distributionManagementArtifactRepository.id}</repositoryId>
                  <artifactId>${project.artifactId}-cfn</artifactId>
                  <groupId>${project.groupId}</groupId>
                  <version>${project.version}</version>
               </configuration>
            </execution>
            <execution>
               <id>deploy-policy-factory-layer</id>
               <goals>
                  <goal>deploy-file</goal>
               </goals>
               <phase>deploy</phase>
               <configuration>
                  <file>${project.build.directory}/${project.artifactId}-${project.version}-policy-factory-layer.zip</file>
                  <url>${project.distributionManagementArtifactRepository.url}</url>
                  <repositoryId>${project.distributionManagementArtifactRepository.id}</repositoryId>
                  <artifactId>${project.artifactId}-policy-factory-layer</artifactId>
                  <groupId>${project.groupId}</groupId>
                  <version>${project.version}</version>
               </configuration>
            </execution>
         </executions>
      </plugin>
	</plugins>
  </build>
<!-- S3 backed artifact repositories
  <distributionManagement>
    <repository>
      <id>release</id>
      <name>Artifact Repository - Release</name>
      <url>${artifactrepo.url}/lambda/release</url>
    </repository>
    <snapshotRepository>
      <id>snapshot</id>
      <name>Artifact Repository - Snapshot</name>
      <url>${artifactrepo.url}/lambda/snapshot</url>
    </snapshotRepository>
  </distributionManagement> -->
  <distributionManagement>
    <repository>
      <id>github</id>
      <name>GitHub jaferrando/aws-apigw-authorizer Apache Maven Packages</name>
      <url>https://maven.pkg.github.com/jaferrando/aws-apigw-authorizer</url>
    </repository>
  </distributionManagement>  
</project>